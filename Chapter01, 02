[Chapter01. 자바 8을 눈여겨봐야 하는 이유]

내가 이 책을 읽는 이유는 스터디에 참여했기 때문이라는 가장 큰 이유를 제외하고,
왜 자바 8을 사용해야하는 지를 알기 위함이다.

대형 SI프로젝트를 경험하면서 자바8로 짜여진 코드를 처음 접하면서, 자바의 혁신을 보았지만 
대체로 주변의 반응은 '왜 자바가 역행하는가?', '왜 자바8을 사용하면서 협업의 어려움을 가져오는가?', '가독성을 왜 방해하는 코드를 작성하는가?'였다.

사실 이 책의 기본 전제인 '자바 전문가'가 아니기에 이 같은 질문에 답하지 못했다.
따라서, 이 책을 통해 질문들의 답을 찾고 싶었다. 

저자는 자바8의 신기술로 세가지를 말했다.
1. 스트림 API
2. 메서드에 코드를 전달하는 방법
3. 인터페이스의 디폴트 메서드

또한, 처음 내가 자바8을 접했을 때의 생각이 위험했음을 알았다.

"하지만 스트림 API 때문에 메서드에 코드를 전달하는 기법이 생겼다고 추리하는 것은 메서드에 코드를 전달하는 기법의 활용성을 제한할 수 있는 위험한
생각이다." (저자)

...


1.1.2 스트림 처림

가장 먼저 설명한 스트림의 처리에서 첫번째 질문이 생겼다.
> 파이프를 이용한 유닉스 명령어 처럼 스트림이 병렬처리를 한다고 하는데, 내가 알고 있는 병렬은 동시 처리를 의미한다.
  아주 자연스럽고 빠른 직렬처리 같아 보이는 데..... 설명해주길... (P42) ========> Q
	
그리고 다음 질문
> 동작 파라미터로 오히려 가독성이 저하되어 보이는데... (P43) =========> Q

저자는 전통적인 객체지향 프로그래밍과 함수형 프로그래밍은 완전 상극이며, 자바 8에서 함수형 프로그래밍을 도입함으로써 
두 가지 프로그래밍 패러다임의 장점을 모두 활용할 수 있게 되었다고 말한다. 이는 내가 기대하는 질문에 답이 나올 것을 암시!!! - A

메서드를 일급값으로 사용하면 프로그래머가 활용할 수 있는 도구가 다양해지면서 프로그래밍이 수월해진다는 사실을 이미 실험을 통해 확인했단다..
따라서 자바8은 이러한 대세를 따름!

메서드 레퍼런스로 더 이상 메서드가 이급값이 아닌 일급값이라는 것!

//어떤 코드의 버그가 있다면 COPY&PASTE한 모든 코드를 고쳐야하는 한다는 단점. 따라서 복붙은 노노노노

{읽다보니 가독성이 안좋아보이는 람다를 왜 쓰는지 알게 되었다.
람다는 익명메소드를 대신해서 사용하는 것이므로 람다가 더 짧고 간결한것
그러나, 람다가 몇 줄 이상 길어진다면 익명람다보다는 코드가 수행하는 일을 잘 설명하는 이름을 가진 메서드를 정의하고 메서드 레퍼런스를 활용한 것이 바람직.
즉! 코드의 명확성이 우선시 되어야한다 - A } -> 아 잘못 생각했다.... 뒤에 익명 메소드랑 했갈림... 차이점 좀 설명 바람.... 


이어 우리팀이 개발하면서 곤욕을 치룬 디폴트 메서드!
이를 이용하면 기존의 코드를 건드리지 않고 원래의 인트세이스 설계를 자유롭게 확장할 수 있단다.


[Chapter02. 동작 파라미터화 코드 전달하기]

동작 파라미터화를 이용하면 자주 바귀는 요구사항에 효과적으로 대응할 수 있다. - A

중복 메서드를 해결하기 위해서는 동작 파리미터화!
(이때, 프레디케이트를 이용, 인터페이스로 구현된 아이)
(여기서 우리 팀 프로젝트를 하면서 내가 인터페이스를 파라미터로 넣을 수 있냐고 말도 안된다고 빡빡 우긴게.... 되는 거였다는 사실을 알고
큰 깨달음... 나는 멍청이)

또 깨달은 것은
람다를 사용하면 가독성이 떨어진다는 생각을 했는데 알고보니
람다는 익명메소드를 대신해서 쓰는 거이라서 익명메소드를 쓰는거보다는 훨씬 간결하고 가독성 좋음.














