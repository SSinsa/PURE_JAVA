[Chapter08. 리팩토링, 테스팅, 디버깅]

8.1 가독성과 유연성을 개선하는 리팩토링

8.1.1 코드 가독성 개선

코드 가독성이 좋다는 것은 추상적인 표현

일반적으로는 코드 가독성을 개선한다는 것은
우리가 구현한 코드를 다른 사람이 쉽게 이해하고 유지보수할 수 있게 만드는 것을 의미한다.

코드 가독성을 높이려면 코드의 문서화를 잘하고, 
표준 코딩 규칙을 준수하는 등의 노력을 기울여야 한다.

자바 8에서 제공하는 기능
1. 코드의 장황함을 줄여서 쉽게 이해할 수 있는 코드를 구현할 수 있다.
2. 메서드 레퍼런스와 스트림 API를 이용해서 코드의 의도(코드가 무엇을 수행하려는 것인지)를 쉽게 표현할 수 있다.


세가지 리팩토링 예제
1.익명 클래스를 람다 표현식으로 리팩토링하기 
2.람다마다 표현식을 메서드 레퍼런스로 리팩토링하기
3.명령형 데이터 처리를 스트림으로 리팩토링하기

8.1.2 익명 클래스를 람다 표현식으로 리팩토링하기

Runnable r1 = new Runnable();
    public void run() {
        System.out.println("Hello");
    }
};

Runnable r2 = () -> System.out.println("Hello");


but 모든 익명 클래스를 람다 표현식으로 변환할 수 있는 것은 아니라
1. 익명 클래스에서 사용한 this와 super 는 람다 표현식에서 다름 의미를 갖는다.
  익명 클래스에서this는 익명 클래스 자신을 가리키지만 람다에서 this는 람다를 감싸는 클래스를 가리킨다.

2. 둘째, 익명 클래스는 감싸고 있는 클래스의 변수를 가릴 수 있다 (섀도 변수)).
  하지만 다음 코드에서 보여주는 것처럼 람다 표현식으로 변수를 가릴 수 없다. 

3. 익명 클래스를 람다 표현식으로 바꾸면 콘텍스트 오버로딩에 따른 모호함이 초래 될 수 있다.
익명 클래스는 인스턴스화할 때 명시적으로 형식이 정해지는 반면 람다의 형식은 콘텍스트에 따라 달라지기 때문이다.

//2번
int a = 10;
Runaable r1 = () -> {    // 컴파일에러
 int a = 2;
 System.out.println(a);
}

Runnable r2 = new Runnalbe() {
    public void run() {
        int a = 2;
        System.out.println(a);
    }
}



//3번
interface Task{
    public void execute();
}
public static void doSomething(Runnable r){ r.run(); }
public static void doSomething(Task a){ r.execute(); }

doSomething(new Task() {
    public void execute(){
        System.out.println("Danger danger!!");
    }
});

doSomething( () -> System.out.println("Danger danger!!")); //doSomething(Runnable)과 doSomethin(Task) 중 어느것인지 알 수 없음

doSomething((Task) () -> System.out.println("Danger danger!!")); //명시적 형변환(Task)로 해결

====> 넷빈즈와 intelliJ등을 포함한 대부분의 통합 개발 환경에서 제공하는 리팩토링 기능을 이용하면 자동 해결가능



8.1.3 람다 표현식을 메서드 레퍼런스로 리팩토링하기

람다 표현식 대신 메서드 레퍼런스를 이용하면 가독성을 높일 수 있다.
메서드 레퍼런스의 메서드명으로 코드의 의도를 명확하게 알릴 수 있기 떄문이다.

Map<CaloricLevel, List<Dish>> dishesByCaloricLevel = 
    menu.stream()
        .collect(
            groupingBy(dish -> {
                if (dis.getCalories() <= 400) return CaloircLevel.DIET;
                else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL;
                else return CaloricLevel.FAT;
            }));

람다 표현식을 별도의 메서드로 추출한 다음 groupingBy 에 인수로 전달할 수 있다. 다음 처럼 코드가 간결하고 의도도 명확해짐
Map<CaloricLevel, List<Dish>> dishesByCaloricLevel = 
    menu.stream().collect(groupingBy(Dish::getCalories));

이제 Dish 클래스에 getCalories메서드 추가
public class Dish {
    ...
    public CaloricLevel getCaloricLevel() {
        if (this.getCalories() <= 400) return CaloricLevel.DIET:
        else if (this.getCalories() <= 700) return CaloicLevel.NORMAL;
        else return CaloricLevel.FAT;
    }
}

또한 comparing과 maxBy 같은 정적 헬퍼 메서드를 활용하는 것도 좋다. 이들은 메서드 레퍼런스와 조화를 이루도록 설계되었다.
람다 표현식보다는 메서드 레퍼런스가 코드의 의도를 더 명확하게 보여준다.

inventory.sort(
    (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight())); //람다

inventory.sort(comparing(Apple::getWeight)); //메서드 레퍼런스


sum, maximum 등 자주 사용하는 리듀싱 연산은 메서드 레퍼런스와 함께 사용할 수 있는 내장 헬퍼 메서드를 제공


람다표현식 + 저수준 리듀싱 연산 보다 Collectors API 를 사용하면 코드의 의도가 더명확

//저수준 리듀싱 연산
int totalCalories = menu.stream().map(Dish::getCalories)
                                 .reduce(0, (c1, c2) -> c1 + c2);

내장 컬렉터를 이용하면 코드 자체로 문제를 더 명확하게 설명할 수 있다

//summingInt (자신이 어떤 동작을 수행하는지 메서드 이름으로 설명함))
int totalCalories = menu.stream().collect(summingInt(Dish::getCalories));


8.1.4 명령형 데이터 처리를 스트림으로 리팩토링하기

이론적으로 반복자를 이용한 기존이 모든 컬렉션 처리 코드를 스트림 API로 바꿔야한다. 
-> 스트림API는 데이터 처리 파이프라인의 의도를 더 명확하게 보여준다.
스트림은 쇼트서킷과 게으름이라는 강력한 최적화뿐 아니라 멀티코어 아키텍처를 활용할 수 있는 지름길을 제공

//필터링과 추출로 엉킨 코드 -> 전체 코드 이해 어렵, 병렬로 실행도 어렵
List<String> dishNames = new ArrayList<>();
for(Dish dish: menu){
    if(dish.getCalories() > 300){
        dishNames.add(dish.getName());
    }
}
//스트림 API 문제를 더 직접 기술 가능, 쉽게 병렬화
menu.parallelStream()
    .filter(d -> d.getCalories() > 300)
    .map(Dish::getName)
    .collect(toList());

명령형 코드의 break, continue, return 등의 제어 흐름문을 모두 분석해서 같은 기능을 수행하느 스트림 연산으로 유추해야
하므로 명령형 코드를 스트림 API로 바꾸는것은 쉽지 않음
-> 도움주는 몇가지 도구가 있음
(http://goo.gl/Ma15w9(http://refactoring.info/tools/LambdaFicator/)) -> 안나옴

8.1.5 코드 유연성 개선

람다표현식을 이용하면 동작 파라미터화를 쉽게 구현가능


#함수형 인터페이스 적용
람다 표현식을 이용하려면 함수형 인터페이스가 필요
함수형 인터페이스를 코드에 추가해야함
조건부 연기 실행, 실행 어라운드
-> 두 가지 자주 사용하는 패턴으로 람다 표현식 리팩토링을 살펴봄

1. 조건부 연기 실행
실제 작업을 처리하는 코드 내부에 제어 프름문이 복잡하게 얽힌 코드를 흔히 볼 수 있음
보안검사나 로깅 관련 코드가 이처럼 사용됨

//내장 자바 Logger 클래스 사용
if (logger.isLoggable(Log.FINER)){
    logger.finer("Problem: " + generateDiagonstic());
}

문제점
- logger 상태가 isLoggable이라는 메서드에 의해 클라이언트 코드로 노출됨
- 메세지를 로깅할때마다 logger 객체의 상태를 매번 확인해야할까? 이들은 코드를 어지럽힐 뿐

//따라서 메시지를 로깅하기 전에 logger 객체가 적절한 수준으로 설정되어는지 내부적으로 확인하는 log 메서드를 사용하는 것이 바람직

logger.log(Level.FINER, "Problem: " + generagDiagnosgic()); // if 제거가능, logger 상태 노출 x
-> but 인수로 전달된 메시지 수준에서 logger가 활성화되어 있지 않더라도 항상 로깅 메세지를 평가하게 됨(Log.FINER을 안해서그런듯)
-> 람다로 해결가능, 메시지 생성 과정을 연기하면 됨 (Supplier를 인수로 갖는 오버로드된 log메서드를 제공)))

public void log(Level level, Suplier<String> msgSupplier)

log 메서드를 호출할 수 있음
logger.log(Level.FINER, () -> "Problem: " + generateDiagnostic());

//log 메서드 내부 구현 코드가
public void log (Level level, Supplier<String> msgSupplier){
    if (logger.isLoggable(level)){
        log(level, msgSupplier.get()); // 람다 실행
    }
}

이 기법으로 해결할 수 있는 문제점

만약 클라이언트 코드에서 객체 상태를 자주 확인하거나, 객체의 일부 메서드를 호출하는 상황이라면 내부적으로 객체의 상태를
확인한 다음에 메서드를 호출하도록 새로운 메서드를 구현하는 것이 좋음
코드 가독성이 좋아질 뿐아니라 캡슐화도 강화됨
(객체 상태가 클라이언트 코드로 노출되지 않음)


2. 실행 어라운드 //3장

매번 같은 준비, 종료 과정을 반복적으로 수행하는 코드가 있다면 이를 람다로 변환할 수 있다.
준비, 종료 과정을 처리하는 로직을 재사용함으로써 코드 중복을 줄일 수 있다.

//파일을 열고 닫을 때 가은 로직을 사용했지만, 람다를 이용해서 다양한 방식으로 파일을 처리할 수 있도록 파라미터화되었다.
String oneLine = 
    processFile ((BufferedReader b) -> b.readLine()); //람다 전달
String twoLines = 
    processFile ((BufferedReader b) -> b.readLine() + b.readLine()); //다른 람다 전달

public static String processFile (BufferedReaderProcessor p)) throws
        IOException {
    try(BufferReader br = new BufferedReader(new FileReader("java8inaction/chap8/data.txt))){
        return p.processor(br); //인수로 전달된 BufferReaderProcessor를 실행
    }
}

public inerface BufferedReaderProcessor {
    String process(BufferedReader b) throws IOException; //IOException을 던질 수 있는 람다의 함수형 인터페이스
}

람다로 BufferedReader 객체의 동작을 결정할 수 있는 것은 함수형 인터페이스 BufferedReaderProcessor 덕분이다.



8.2 람다로 객체지향 디자인 패턴 리팩토링하기

디자인패턴
- 공통적인 소트프웨어 문제를 설계할 때 재사용할 수 있는, 검증된 청사진을 제공한다.

람다를 쓰면 이전에 디자인 패턴으로 해결하던 문제를 더 쉽고 간단하게 해결할 수 있다.

5가지 패턴
1. 전략
2. 템플릿 메서드
3. 옵저버
4. 의무체인
5. 팩토리


8.2.1 전략
전략 패턴은 한 유형의 알고리즘을 보유한 상태에서 런타임에 적절한 알고리즘을 선택하는 기법
-> 다양한 기준을 갖는 입력값을 검증하거나, 다양한 파싱 방법을 사용하거나, 입력 형식을설정하는 등 다양한 시나리오에 전략 패턴을 활용할 수 있다.

1. 알고리즘을 나타내는 인터페이스
2. 다양한 알고리즘을 나타내는 한 개 이상의 인터페이스 구현
3. 전략 객체를 사용하는 한 개 이상의 클라이언트

람다표현식을 이용하면 전략 디자인 패턴에서 발생하는 자잘한 코드를 제거할 수 있음
람다 표현식은 코드 조각을 캡슣롸함
즉, 람다표혀닉으로 전략 디자인 패턴을 대신할 수 있음

8.2.2 템플릿 메서드
알고리즘의 개요를 제시한 다음에 알고리즘의 일부를 고칠 수 있는 유연함을 제공해야 할 때 템플릿 메서드 디자인 패턴을 사용
(이 알고리즘을 사용하고 싶은데 그대로는 안되겠고, 조금 고쳐야하는 상황)


8.2.3 옵저버
어떤 이벤트가 발생했을 때 한 객체가 다름 객체 리스트에 자동으로 알림을 보내야 하는 상황에서 옵저버 디자인 패턴을 사용
불필요한 감싸는 코드 제거 전문가
즉, 세 개듸 옵저버를 명시적으로 인스턴스화하지 않고 람다 표현식을 직접 전달해서 실행할 동작을 지정할 수 있다.

8.2.4 의무체인

작업처리 객체의 체인을 만들 때는 의무체인 패턴을 사용ㅎㅁ.
한 객체가 어떤 작업을 처리한 다음에 다른 객체로 전달하고, 다른 객체도 해야할 작업을 처리한 다음에 또 다른 객체로 전달하는 식이다.

unaryOperator<String> 형식의 인스턴스로 표현할 수 있음
andThen 메서드로 이들 함수를 조합해서 체인을 만들 수 있다


8.2.5 팩토리
인스턴스화 로직을 클라이언트에 노출하지 않고 객체를 만들 때 팩토리 디자인 패턴을 사용한다.

람다로 이를 구현가능
but 팩토리 메서드 createProduct가 상품 생성자로 여러 인수를 전달하는 상황에서는 이 기법을 적용하기 어렵다.



8.3 람다 테스팅
* 단위 테스팅

8.3.1 보이는 람다 표현식의 동작 테스팅
람다는 익명이므로 테스트 코드 이름을 호출할 수 없음
람다를 필드에 저장해서 재사용할 수 있으며 람다의 로직을 테스트할 수 있음

람다 표현식은 함수형 인터페이스의 인스턴스를 생성
생성된 인스턴스의 동작으로 람다 표현식을 테스트할 수 있음
Comparator 객체 compareByXAndThenY에 다양한 인수로 Compare 메서드를 호출하면서 예상대로 동작하는지
테스트하는 코드


8.3.2 람다를 사용하는 메서드의 동작에 집중하라
람다의 목표 -> 정해진 동작을 다른 메서드에서 사용할 수 있도록 하나의 조각으로 캡슐화하는 것
그러면 세부 구현을 포함하는 람다 표현식을 공개하지 말아야한다

8.3.3 복잡한 람다를 개별 메서드로 분할하기
복잡한 람다식 -> 8.1.3절처럼 람다 표현식을 메서드 레퍼런스로 바꾸는 것


8.3.4 고차원 함수 테스팅
함수를 인수로 받거나 다른 함수를 반환하는 메서드는 좀 더 사용하기 어렵 (고차원 함수 14장)

메서드가 람다를 인수로 받는다면 다른람다로 메서드의 동작을 테스트할 수 있다.

테스트해야할 메서드가 다른 함수를 반환한다면? -> 함수형 인터페이스의 인스턴스로 간주하고 함수의 동작을 테스트



8.4 디버깅
스택 트레이스 / 로깅 -> 디버깅시 문제가 있다면
하지만 람다 표현식과 스트림은 기존의 디버깅 기법으로는 x

8.4.1 스택 트레이스 확인
스택 프레임 -> 예외 발생으로 프로그램 실행이 갑자기 중단되었다면 먼저 어디에서 멈췄고 어떻게 멈추게 되었는지 알수 있음
           -> 여기에 프로그램이 메서드를 호출할 떄마다 프로그램에서의 호출 위치, 호출할떄의 인수값, 호출된 메서드의 지역 변수등을 포함한
             호출정보가 생성되며 이들 정보는 스택 프레임에 저장된다.

프로그램이 멈췄다면 프로그램이 어떻게 멈추게 되었는지 프레임별로 보여주는 스택 트레이스를 얻을 수 있음
즉, 문제가 발생한 지점에 이르게 된 메서드 호출 리스트를 얻을 수 있다
메서드 호출 리스트를 통해 문제가 어떻게 발생했는지 이해할 수 있다.

1. 람다와 스택 트레이스
람다 표현식은 이름이 없기 때문에 복잡한 스택 트레이스가 생성됨

8.4.2 정보 로깅
스트림 파이프라인에 적용된 각각의 연산이 어떤 결과를 도출하는지 확인 -> peek 라는 스트림 연산 사용!!

peek는 스트림 파이프라인의 각 동작 전후의 중간값을 출력

[Chapter09. 디폴트 메서드]
메서드 구현을 포함하는 인터페이스 구현가능


디폴트 메서드를 사용하는 이유
-> 주로 라이브러리 설계자들이 사용함
-> 자바 API 호환성을 유지하면서 라이브러리를 바꿀수 있다
-> 다중 상속 동작이라는 유연성 제공, 프로그램 구성에도 도움이 됨

* 정적메서드와 인터페이스 P290

9.1 변화하는 API
9.1.1 API 버전 1
9.1.2 API 버전 2
    사용자가 겪는 문제
    -> 인터페이스에 새로운 메서드를 추가하면 바이너리 호환성은 유지된다.
    (바이너리 호환성이란 새로 추가된 메서드를 호출하지만 않으면 새로운 메서드 구현이 없이도 기존 클래스 파일 구현이 잘동작한다는 의미)
    -> 1. 객체가 인수로 전달되면 어떤 메서드는 정의되지 않아 런타임에 에러발생
    -> 2. 위를 포함하는 전체 애플리케이션을 재빌드할 때 다음과 같은 컴파일에러발생

공개된 API를 고치면 기존 버전과의 호환성 문제가 발생
-> 디폴트메서드로 해결가능

* 바이너리 호환성, 소스호환성, 동작 호환성

9.2 디폴트 메서드
자신을 구현하는 클래스에서 메서드를 구현하지 않을 수 있는 새로운 시그너처


인터페이스가 구현을 가질 수 있고 클래스는 여러 인터페이스를 동시에 구현할 수 있으므로 결국 자바도
다중 상속 지원??? 인터페이스를 구현하는 클래스가 디폴트 메서드와 같은 메서드 시그너처를 정의하거나 아니면 디폴트 메서드를 오버라이드하면?
-> 9.4절에서 규칙있음

* 추상메서드와 자바8의 인터페이스 차이점


9.3 디폴트 메서드 활용 패턴
우리가 만드는 인터페이스에도 디폴트 메서드를 추가할 수 있다
선택형 메서드, 동작 다중 상속

9.3.1 선택형 메서드
Interator에서 remove 기능


9.3.2 동작 다중 상속
자바에서 클래스는 한 개의 다른 클래스만 상속할 수 있지만 인터페이스는 여러 개 구현할 수 있다

#다중 상속 형식
ArrayList는 한 개의 클래스를 상속받고, 여섯 개의 인터페이스를 구현함
따라서 디폴트메서드를 사용하지 않아도 다중 상속을 활용할 수 있다.

#기능이 중복되지 않는 최소의 인터페이스
interface에 디폴트메서드로 구현하면 한개 클래스만 상속해도 이런 기능을 사용가능 ***

#인터페이스 조합

하나만 고쳐도 모든 클래스가 자동으로 변경한 코드를 상속받음

* 옳지 못한 상속 p301

9.4 해석 규칙
9.4.1 알아야 할 세가지 해결 규칙
1. 클래스가 항상 이긴다. 클래스나 슈퍼클래스에서 정의한 메서드가 디폴트 메서드보다 우선권을 갖는다
2. 1번 규칙 이외의 상황에서는 서브인터페이스가 이긴다. 상속관계를 갖는 인텊이스에서 같은 시그너처를 갖는 
메서드를 정의할 때는 서브인터페이스가 이긴다. 즉, B가 A를 상속받는다면 B가 A를 이긴다
3. 여전히 디폴트 메서드의 우선순위가 결정되지 않았다면 여러 인터페이스를 상속받는 클래스가 명식적으로 
디폴트 메서드를 오버라이드하고 호출해야한다.

9.4.2 디폴트 메서드를 제공하는 서브인터페이스가 이긴다
// 추가설명

9.4.3 충돌 그리고 명시적인 문제해결
//추가설명

# 충돌해결
명시적으로 메서드를 선택해야함

9.4.4 다이아몬드 문제점
다이어그램의 모양이 다이아몬드


* C++ 다이아몬드 무제


