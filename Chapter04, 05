[Chapter04. 스트림 소개]


!스트림은 자바 API에 새로 추가된 기능으로, 
스트림을 이용하면 선언형(즉, 데이터를 처리하는 임시 구현 코드 대신 
질의로 표현할 수 있다)으로 컬렉션 데이터를 처리할 수 있다. 

!스트림을 이용하면 멀티스레드 코드를 구현하지 않아도 데이터를 
투며하게 병렬로 처리할 수 있다.

import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;
List<String> lowCaloricDishesName = 
                menu.stream() =
                    .filter(d -> d.getCalories() < 400)
                    .sorted(comparing(Dish::getCalories))
                    .map(Dish::getName)
                    .collect(toList());

==>
stream()을 parallelStream()으로 바꾸면 이 코드를 
멀티코어 아키텍쳐에서 병렬로 실행할 수 있다.

List<String> lowCaloricDishesName = 
                menu.parallelStream()
                    .filter(d -> d.getCalories() < 400)
                    .sorted(comparing(Dished::getCalories))
                    .map(Dish::getName)
                    .collect(toList());

!선영형으로 코드를 구현하면 루프와 IF조건문 등의 제어 블록을
사용해서 어떻게 동작을 구현할지 지정할 필요 없이 
동작의 수행을 지정할 수 있음
따라서, 변하는 요구사항에 쉽게 대응할 수 있따.

!여러 연산을 파이프라인으로 연결해도 여전히 가독성과 명확성이 유지됨.

menu -> filter -> sorted -> map -> collect

filter(또는 sorted, map, collect) 같은 연산
: 특정 스레딩 모델에 제한되지 않고 자유롭게 어떤 상황에서든 사용할 수 있다,
데이터 처리과정을 병렬화하면서 스레드와 락을 걱정할 필요가 없다.
->스트림API 때문에!!


!스트림API
- 선언형 : 더 간결하고 가독성이 좋아진다.
- 조립할 수 있음 : 유연성이 좋아진다.
- 병렬화 : 성능이 좋아진다.


!java.util.stream.stream

!스트림 : 데이터 처리연산을 지원하도록 소스에서 추출된 연속된 요소

!파이프라이닝 : 대부분의 스트림 연산은 스트림 연산끼리 연결해서
커다란 파이프라인을 구성할 수 있도록 스트림 자신을 반환한다.
-> 연산 파이프라인은 데이터베이스 질의와 비슷

!내부반복 : 반복자를 이용하지 않았도 됨

!데이터를 언제 계산하느냐가 컬렉션과 스트림의 가장 큰 차이

!컬렉션은 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조다.
즉, 컬렉션의 모든 요소는 컬렉션에 추가하기 전에 계산되어야함
(컬렉션에 요소를 추가하거나 컬렉션의 요소를 삭제할 수 있다.
이러한 연산을 수행할 때마다 컬렉션의 모든 요소를 메모리에 저장해야 
하며 컬렉션에 추가하려는 요소는 미리 계산되어야 한다)

!스트림은 요청할 때만 요소를 계산하는 고정된 자료구조
(스트림에 요소를 추가하거나 스트림에서 요소를 제거할 수 없다).

!스트림은 게으르게 만들어지는 컬레션과 같다.
즉, 사용자가 데이터를 요청할 때만 값을 계산한다.
(요청 중심 제조 or 즉석 제조)

!컬렉션은 적극적으로 생성된다 (생산자 중심 -> 팔기전에 창고에 가득)

cf. DVD = 컬렉션 / 스트리밍 = 스트림

!반복자와 마찬가지로 스트림도 한 번만 탐색, 
탐색된 스트림의 요소는 소비된다.
다시 탐색하려면 초기 데이터 소스에서 새로운 스트림을 만들어야 한다.
데이터 소스가 I/O 채널이라면 소스를 반복할 수 없으므로 새로운 스트림
만들 수 없다.

!컬렉션 인터페이스를 사용하려면 사용자가 직접요소를 반복해야함.
(for-each)-> 외부 반복
, 스트림 라이브러리는 반복을 알아서 처리하고 처리 결과 스트림값을
어딘가에 저장 -> 내부반복

!스트림 라이브러리의 내부 반복은 데이터 표현과 하드웨어를 활용한
병렬성 구현을 자동으로 선택한다.외부 반복은 병렬성을 스스로 관리해야함

!중간연산, 최종연산

!스트림 이용과정
- 질의를 수행할 (컬렉션 같은) 데이터 소스
- 스트림 파이프라인을 구성할 중간 연산 연결
- 스트림 파이프라인을 실행하고 결과를 만들 최종 연산

[Chapter05. 스트림 활용]

List<Dish> vegetarianDishes = new ArrayList<>();
for (Dish d : menu){
    if (d.isVegetarian()) {
        vegetarianDishes.add(d);
    }
}

==> 

import static java.util.stream.Collectors.toList;
List<Dish> vegetarianDishes = 
    menu.stream()
        .filter(Dish::isVegetarian)
        .collect(toList());

> 필터링과 슬라이싱
- 프레디케이트로 필터링 fitler(Dish::isVegetarian)
- 고유 요소 필터링 distinct()
- 스트림 축소 limit(3)
- 요소 건너뛰기 skip(2)


> 매핑(새로운 버전을 만든다는 개념이 가까움)
cf. getName은 문자열을 반환하므로 map 메서드의 출력 스트림은
Stream<String> 형식

!flapMap 은 각 배열을 스트림이 아니라 스트림의 콘텐츠로 매핑
즉, map(Array::stream)과 달리 flatMap은 하나의 평면화된 스트림을 반환


> 검색과 매칭
- 프레디케이트가 주어진 스트림에서 적어도 한 요소와 일치하는지 확인
    : anyMatch메서드를 이용. 
cf.
if(menu.stream().anyMatch(Dish::isVegetarian)){
    System.out.println("The menu is (somewhat) vegetarian friendly!!");
}
- 프레디케이트가 모든 요소와 일치하는지 검사 
    : allMatch
cf.
boolean isHealthy = menu.stream()
                        .allMatch(d->d.getCalories() < 1000);
    * noneMatch 메서드 <-> allMatch
    cf. boolean isHealthy = menu.stream()
                                .noneMatch(d-> d.getCalories() >= 1000);


# 스트림 쇼트서킷 기법 -> anyMatch, allMatch, noneMatch
때로는 전체 스트림을 처리하지 않았더라도 결과를 반환할 수 있음
ex) and 연산
위 세가지 연산이 그러하다. 
마찬가지로 스트림의 모든 요소를 처리할 필요없이 주어진 크기의
스트림을 생성하는 limit도 쇼트서킷 연산이다.
특히 무한한 요소를 가진 스트림을 유한한 크리고 줄일 수 있는
유용한 연산.

- 요소검색
    : findAny -> 현재 스트림에서 임의의 요소를 반환

# Optional
Optional<T> 클래스 (java.util.Optional)는 값의 존재나 부재 여부를
표현하느 컨테이너 클래스다. 
null은 쉽게 에러를 일으킬 수 있어서 생긴 기능 -> Optional<T>
자세히는 10장에서! 
! Optional<T>은 값이 존재하는지 확인하고 값이 없을 때
어떻게 처리할 것인지 강제하는 기능을 제공한다는 사실.

cf.
menu.stream()
    .filter(Dish::isVegetarian)
    .findAny()
    .ifPresent(d-> System.out.println(d.geName()); // 값이 있으면 출력, 
                                                    값이 없으면 아무일도 안일어남.

- 첫 번째 요소 찾기 
    : findFirst, findAny

# findFirst, findAny
- findFirst로는 병렬실행에서 첫번째 요소를 찾기 어렴,
- 요소 반환 순서가 상관없다면 병렬 스트림에서는 제약이 적은 findAny


> 리듀싱
  리듀싱 연산 : 모든 스트림 요소를 처리해서 값으로 도출하는 연산
-> 폴드라고 부름

- 요소의 합
cf.
int sum = 0;
for (int x : numbers){
    sum += x;
}

==>

int sum = numbers.stream().reduce(0, (a, b) -> a + b);

==>

int sum = numbers.stream().reduce(0, Integer::sum);

> 초깃값을 받지 않도록 오버로드된 reduce도 있다.
이 reduce는 Optional 객체를 반환

Optional<Integer> sum = numbers.stream().reduce((a, b) -> (a + b));
스트림에 아무 요소도 없으면 초기값이 없으므로 합계가 반환이 안되므로
Optional 객체로 감싼 결과를 반환

- 최댓값과 최솟값
Optional<Integer> max = numbers.stream()reduce(Integer::max);
Optional<Integer> min = numbers.stream()reduce(Integer::min);
(이거보다 
Optional<Integer> min = numbers.stream()reduce((x, y) -> x<y ? x:y);
이게 더 이해하기 쉬움)

# map + reduce = map-reduce 맵 리듀스 패턴
: 쉽게 병렬화하는 특징, 구글이 웹 검색에 적용
cf.
int count = menu.stream()
                .map(d->1)
                .reduce(0,(a, b) -> a + b);

# reduce 메서드의 장점과 병렬화
-> 병렬화하기 힘듬
-> 모든 요소를 더하는 코드를 병렬로 만드는 방법
   (stream() 을 parallelStream()으로 바꾸기)

   int sum = numbers.parallelStream().reduce(0, Integer::sum);
   (위 코드를 병렬로 실행하려면 대가를 지불해야함.
    즉, reduce에 넘겨준 람다의 상태가 바뀌지 말아야함.
    연산이 어떤 순서로 실행되더라도 결과가 바뀌지 않는 구조여야함)
   
#스트림 연산 : 상태없음과 상태있음
- map, filter 등은 입력 스트림에서 각 요소를 받아 0 또는 결과를
출력 스트림으로 보낸다.
따라서 이들은 보통 상태가 없는 즉 내부 상태를 갖지 않는 연산이다.
- reduce, sum, max 같은 연산은 결과를 누적할 내부 상태가 필요
예제의 내부 상태는 작은값. 스트림에서 처리하는 요소 수와 관계없이 
내부 상태의 크기는 한정되어있다.
- sorted, distinct 값은 연산은 filter나 map처럼 스트림을 입력으로
받아 다른 스트림을 출력하는 것처럼 보일 수 있다.
하지만 sorted나 distinct는 filter나 map과는 다르다.
스트림의 요소를 정렬하거나 중복을 제거하려면 과거의 이력을 알아야함.
연산을 수행하는데 필요한 저장소 크기는 정해져 있지 않다.
그러나 무한이라 문제가 생길 수 있다 따라서 내부 상태를 갖는 연산으로 
간주할 수 있다.


> 숫자형 스트림
int calories = menu.stream()
                    .map(Dish::getCalories)
                    .reduce(0, Integer::sum);
- 위코드에는 박싱 비용이 있음, 내부적으로 합계를 계산하기 전에
Integer를 기본형으로 언박싱해야함. 

int calories = menu.stream()
                    .map(Dish::getCalories)
                    .sum();
- 위코드는 sum 메소드를 직접 호출할 수 없음, map메서드가 Stream<T>
를 생성하기 때문
- 스트림의 요소 형식은 Integer이지만 인터페이스에는 sum 메서드가 없음
menu처럼 Stream<Dish> 형식의 요소만 있다면 sum이라는 연산을 수행할 수 었기 떄문
-> 다행히도 스트림 API 숫자 스트림을 효율적으로 처리할 수 있도록 
"기본형 특화 스트림"을 제공


> 기본형 특화 스트림
- 숫자 스트림으로 매핑
    : mapToInt, mapToDouble, mapToLong
    (Stream<Integer>가 아닌 IntStream, 
    Stream<Double>이 아닌 DoubleStream ...)
    이러면 IntStream(or DoubleStream ...)인터페이스에서 제공하는
    sum 메서드를 이용가능, 스트림이 비어있으며 sum 기본값은 0

- 객체 스트림으로 복원하기 
    IntStream의 map 연산은 int를 인수로 받아서 int를 반환하는 람다(IntUnaryOperator)
    를 인수로 받는다.
    but 다른 값으로 반환하고 싶으면 스트림 인터페이스에 정의된
    일반적인 연산을 사용.
    cf.
    IntStream intStream = menu.stream().mapToInt(Dish::getCalories); //스트림을 숫자스트림으로
    Stream<Integer> stream = intStream.boxed(); //숫자스트림을 스트림으로 

> 기본값 : OptionalInt
스트림에 요소가 업슨 상황과 실제 최댓값이 0일떄 처럼
-> 이전에 값이 존재하는지 여부를 가리킬 수 있는 컨테이너 클래스 Optional

-> Optional을 Integer, String 등의 레퍼런스 형식으로 파라미터화할 수 있음
   (OptionalInt, OptionalDouble, OptionalLong)

cf. 
OptionalInt maxCaloires = menu.stream()
                                  .mapToInt(Dish::getCalories)
                                  .max();
int max = maxCaloires.orElse(1); // 값이 없을 떄 기본 최댓값을 명시적으로 설정    

> 숫자범위
 : range, rangeClosed
두 메서드 모두 시작값과 종료값을 가짐.
차이는
range는 시작, 종료값이 결과에 포함 x
rangeClosed는 포함
cf.
IntStream evenNumbers = IntStream.ragneClosed(1, 100)
                                 .filter(n -> n % 2 == 0);
System.out.println(evenNumbers.count());

// rangeClosed(1,100) 일때는 50개
// range(1,100) 일떄는 49개

> 피타고라스
Stream<double[]> pythagoreanTriples2 = 
    IntStream.rangeClosed(1,100).boxed()
             .flatMap(a ->
                IntStream.rangeClosed(a, 100)
                         .mapToObj(
                             b-> new double[]{a, b, Math.sqrt(a * a + b * b)})
                         .filter(t -> t[2] % 1 == 0));


> 스트림 만들기

- 값으로 스트림 만들기
임의의 수를 인수로 받는 정적 메서드 Stream.of를 이용해서 스트림을 만들 수 있음

Stream<String> stream = Stream.of("Java 8 ", "Lambdas ", "In ", "Action ");
stream.map(String::toUpperCase).forEach(System.out::println);
- 스트림의 모든 문자열을 대문자로 변환할 후 문자열을 하나씩 출력

Stream<String> emptyStream = Stream.empty();
- 스트림을 비울 수 있음


> 배열로 스트림 만들기
배열을 인수로 ㅂ다는 정적 메서드 Arrays.stream을 이용해서 스트림을 만듬

int[] numbers = {2,3,5,7,11,13};
int sum = Arrays.stream(numbers).sum();
- 기본형 int로 이루어진 배열을 IntStream으로 변환

> 파일로 스트림 만들기
java.nio.file.Files 의 많은 정적 메서드가 스트림을 반환.

> 함수로 무한 스트림 만들기
Stream.iterate와 Stream.generate으로 
무한 스트림, 즉 고정된 컬렉션에서 고정된 크기의 스트림을 만들었던 것과는
달리 크기가 고정되지 않은 스트림을 만들 수 있음
--> but 내부 상태를 갖기 위해 limit()함수를 함꼐 사용

- iterate
cf.
Stream.iterate(0, n-> n+2)  // 무한 스트림, 언바운드 스트림
      .limit(10)            // 한정되게 만드는 함수
      .forEach(System.out::println);

- generate
cf.
Stream.generate(Math::random)
      .limt(5)
      .forEach(System.out::println);

* 병렬코드에서는 공급자에 상태가 있으며 안전하지 않다는 것



Q. iterate와 generate를 통해 각각 피보나치 수열을 구현했을 떄 차이점.
왜 병렬 코드에서는 공급자에 상태가 있으면 안전하지 않다는 것인지 구현해서 알려주십시오.
(그 밑이랑 7장에서 설명한다는데 이해가 안감...))

